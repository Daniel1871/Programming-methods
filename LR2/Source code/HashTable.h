/*!
	\file
	\brief Заголовочный файл с описанием хеш-таблицы.

	Данный файл содержит в себе определение класса хеш-таблицы.
*/
#ifndef HASHTABLE_H
#define HASHTABLE_H

#include "Military.h"

/*!
	\brief Класс, содержащий данные об узле хеш-таблицы.

	Данный класс содержит ключ, и данные военнослужащего.
*/
class HashNode{
public:
	string key; ///< Ключ (ФИО военнослужащего), соответствуюший узлу хеш-таблицы
	Military data; ///< Данные военнослужащего
	
	/*!
	\brief Конструктор с параметром
	\param[in] data Данные военнослужащего, с помощью которых инициализируется текущий узел хеш-таблицы
	*/
	HashNode(Military data) : key(data.getFullName()), data(data) {}
};

/*!
	\brief Класc хеш-таблицы.

	Данный класс содержит указатель на хеш-таблицу.
*/
class HashTable{
	HashNode **table; ///< Массив указателей на узлы хеш-таблицы
	unsigned int size; ///< Размер хеш-таблицы
	
	/*!
	\brief Метод для обработки коллизий при вставке узла хещ-таблицы.
	
	Обрабатывает коллизии при помощи линейного пробирования
	\param[in] index Индекс элемента хеш-таблицы при возникновении коллизии
	*/
	void handleCollision(unsigned int &index);
public:
	/*!
	\brief Конструктор с параметром
	
	Динамически выделяет память для массива указателей на узлы хеш-таблицы
	\param[in] size Размер хеш-таблицы
	*/
	HashTable(unsigned int size) : size(size) {
		table = new HashNode* [size];
		for(unsigned int i = 0; i < size; ++i) table[i] = NULL;
	}
	
	/*!
	\brief Деструктор
	
	Удаляет динамическую память, выделенную под узлы хеш-таблицы и под массив указателей на узлы хеш-таблицы
	*/
	~HashTable(){
		for(unsigned int i = 0; i < size; ++i) delete table[i];
		delete [] table;
	}

	/*!
	\brief Метод для вставки элемента в хеш-таблицу
	
	Вставляет узел с переданными данными о военнослужащем в хеш-таблицу
	\param[in] data Данные военнослужащего
	*/
	void insert(Military data);
	
	/*!
	\brief Метод для поиска узла хеш-таблицы по ключу
	
	Проверяет, содержится ли элемент с переданным ключом в хеш-таблице
	\param[in] key Ключ искомого узла
	\return Результат поиска: истина или ложь
	*/
	bool find(const string &key);
	
	/*!
	\brief Метод для вычисления хеша
	
	Вычисляет хеш по переданному ключу
	\param[in] key Ключ
	\return Результат хеширования: индекс в хеш-таблице
	*/
	unsigned int ROT13Hash(const string &key);
};

#endif
